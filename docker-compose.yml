version: "3.8"

volumes:
    n8n_storage:
    ocr_uploads:
    redis_data:

services:
    redis:
        image: redis:7-alpine
        restart: always
        volumes:
            - redis_data:/data
        networks:
            - app-network

    n8n:
        image: n8nio/n8n:latest
        restart: always
        volumes:
            - n8n_storage:/home/node/.n8n
            - ./workflows:/home/node/.n8n/workflows
            - ./init-workflows.sh:/docker-entrypoint-init.d/init-workflows.sh  # 初始化腳本
        environment:
            - WEBHOOK_URL=${NGROK_WEBHOOK_URL}
            - NGROK_WEBHOOK_URL=${NGROK_WEBHOOK_URL}
            - N8N_HOST=0.0.0.0
            - N8N_PORT=5678
            - N8N_PROTOCOL=http
            - N8N_TRUST_PROXY=true
            - N8N_SECURE_COOKIE=false
        networks:
            - app-network
        depends_on:
            - redis

    ocr-service:
        build:
            context: .
            dockerfile: Dockerfile.ocr
        restart: always
        volumes:
            - ocr_uploads:/app/uploads
        environment:
            - FLASK_ENV=${FLASK_ENV}
            - FLASK_DEBUG=${FLASK_DEBUG}
            - REDIS_URL=redis://redis:6379/0
            - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
        networks:
            - app-network
        depends_on:
            - redis

    celery-worker:
        build:
            context: .
            dockerfile: Dockerfile.ocr
        restart: always
        command: python -u -m celery -A celery_config.celery_app worker --loglevel=info --concurrency=4
        volumes:
            - ocr_uploads:/app/uploads
        environment:
            - REDIS_URL=redis://redis:6379/0
            - PYTHONUNBUFFERED=1
            - PYTHONWARNINGS=ignore
            - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
            - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
        networks:
            - app-network
        depends_on:
            - redis

    nginx:
        image: nginx:alpine
        restart: always
        ports:
            - "8080:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        networks:
            - app-network
        depends_on:
            - n8n
            - ocr-service

    ngrok:
        image: ngrok/ngrok:latest
        restart: unless-stopped
        command:
            - "http"
            - "--url=${NGROK_URL}"
            - "nginx:80"
        environment:
            - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
        ports:
            - "4040:4040"
        networks:
            - app-network
        depends_on:
            - nginx

    
networks:
    app-network:
        driver: bridge